// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountCommitSoft(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountCommitHard(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class STACKClaimed extends ethereum.Event {
  get params(): STACKClaimed__Params {
    return new STACKClaimed__Params(this);
  }
}

export class STACKClaimed__Params {
  _event: STACKClaimed;

  constructor(event: STACKClaimed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Upgrade extends ethereum.Event {
  get params(): Upgrade__Params {
    return new Upgrade__Params(this);
  }
}

export class Upgrade__Params {
  _event: Upgrade;

  constructor(event: Upgrade) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GaugeD1__balancesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GaugeD1__getCommittedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GaugeD1 extends ethereum.SmartContract {
  static bind(address: Address): GaugeD1 {
    return new GaugeD1("GaugeD1", address);
  }

  STACK(): Address {
    let result = super.call("STACK", "STACK():(address)", []);

    return result[0].toAddress();
  }

  try_STACK(): ethereum.CallResult<Address> {
    let result = super.tryCall("STACK", "STACK():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  acceptToken(): Address {
    let result = super.call("acceptToken", "acceptToken():(address)", []);

    return result[0].toAddress();
  }

  try_acceptToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("acceptToken", "acceptToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balances(param0: Address): GaugeD1__balancesResult {
    let result = super.call(
      "balances",
      "balances(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GaugeD1__balancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_balances(param0: Address): ethereum.CallResult<GaugeD1__balancesResult> {
    let result = super.tryCall(
      "balances",
      "balances(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GaugeD1__balancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  claimSTACK(): BigInt {
    let result = super.call("claimSTACK", "claimSTACK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimSTACK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimSTACK", "claimSTACK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitHardWeight(): BigInt {
    let result = super.call(
      "commitHardWeight",
      "commitHardWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_commitHardWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitHardWeight",
      "commitHardWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitSoftWeight(): BigInt {
    let result = super.call(
      "commitSoftWeight",
      "commitSoftWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_commitSoftWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitSoftWeight",
      "commitSoftWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositedCommitHard(): BigInt {
    let result = super.call(
      "depositedCommitHard",
      "depositedCommitHard():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_depositedCommitHard(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositedCommitHard",
      "depositedCommitHard():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositedCommitSoft(): BigInt {
    let result = super.call(
      "depositedCommitSoft",
      "depositedCommitSoft():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_depositedCommitSoft(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositedCommitSoft",
      "depositedCommitSoft():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emissionRate(): BigInt {
    let result = super.call("emissionRate", "emissionRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_emissionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("emissionRate", "emissionRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endBlock(): BigInt {
    let result = super.call("endBlock", "endBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endBlock", "endBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundOpen(): boolean {
    let result = super.call("fundOpen", "fundOpen():(bool)", []);

    return result[0].toBoolean();
  }

  try_fundOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("fundOpen", "fundOpen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCommitted(): GaugeD1__getCommittedResult {
    let result = super.call(
      "getCommitted",
      "getCommitted():(uint256,uint256,uint256)",
      []
    );

    return new GaugeD1__getCommittedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getCommitted(): ethereum.CallResult<GaugeD1__getCommittedResult> {
    let result = super.tryCall(
      "getCommitted",
      "getCommitted():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GaugeD1__getCommittedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTotalBalance(): BigInt {
    let result = super.call(
      "getTotalBalance",
      "getTotalBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBalance",
      "getTotalBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalWeight(): BigInt {
    let result = super.call("getTotalWeight", "getTotalWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalWeight",
      "getTotalWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBalance(_user: Address): BigInt {
    let result = super.call(
      "getUserBalance",
      "getUserBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserBalance(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserBalance",
      "getUserBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserWeight(_user: Address): BigInt {
    let result = super.call(
      "getUserWeight",
      "getUserWeight(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserWeight(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserWeight",
      "getUserWeight(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastBlock(): BigInt {
    let result = super.call("lastBlock", "lastBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastBlock", "lastBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensAccrued(): BigInt {
    let result = super.call("tokensAccrued", "tokensAccrued():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensAccrued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensAccrued",
      "tokensAccrued():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultGaugeBridge(): Address {
    let result = super.call(
      "vaultGaugeBridge",
      "vaultGaugeBridge():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vaultGaugeBridge(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultGaugeBridge",
      "vaultGaugeBridge():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vaultGaugeBridge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimSTACKCall extends ethereum.Call {
  get inputs(): ClaimSTACKCall__Inputs {
    return new ClaimSTACKCall__Inputs(this);
  }

  get outputs(): ClaimSTACKCall__Outputs {
    return new ClaimSTACKCall__Outputs(this);
  }
}

export class ClaimSTACKCall__Inputs {
  _call: ClaimSTACKCall;

  constructor(call: ClaimSTACKCall) {
    this._call = call;
  }
}

export class ClaimSTACKCall__Outputs {
  _call: ClaimSTACKCall;

  constructor(call: ClaimSTACKCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amountCommitSoft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountCommitHard(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _creditTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class RescueCall extends ethereum.Call {
  get inputs(): RescueCall__Inputs {
    return new RescueCall__Inputs(this);
  }

  get outputs(): RescueCall__Outputs {
    return new RescueCall__Outputs(this);
  }
}

export class RescueCall__Inputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RescueCall__Outputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }
}

export class SetEmissionRateCall extends ethereum.Call {
  get inputs(): SetEmissionRateCall__Inputs {
    return new SetEmissionRateCall__Inputs(this);
  }

  get outputs(): SetEmissionRateCall__Outputs {
    return new SetEmissionRateCall__Outputs(this);
  }
}

export class SetEmissionRateCall__Inputs {
  _call: SetEmissionRateCall;

  constructor(call: SetEmissionRateCall) {
    this._call = call;
  }

  get _new(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEmissionRateCall__Outputs {
  _call: SetEmissionRateCall;

  constructor(call: SetEmissionRateCall) {
    this._call = call;
  }
}

export class SetEndBlockCall extends ethereum.Call {
  get inputs(): SetEndBlockCall__Inputs {
    return new SetEndBlockCall__Inputs(this);
  }

  get outputs(): SetEndBlockCall__Outputs {
    return new SetEndBlockCall__Outputs(this);
  }
}

export class SetEndBlockCall__Inputs {
  _call: SetEndBlockCall;

  constructor(call: SetEndBlockCall) {
    this._call = call;
  }

  get _block(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEndBlockCall__Outputs {
  _call: SetEndBlockCall;

  constructor(call: SetEndBlockCall) {
    this._call = call;
  }
}

export class SetFundOpenCall extends ethereum.Call {
  get inputs(): SetFundOpenCall__Inputs {
    return new SetFundOpenCall__Inputs(this);
  }

  get outputs(): SetFundOpenCall__Outputs {
    return new SetFundOpenCall__Outputs(this);
  }
}

export class SetFundOpenCall__Inputs {
  _call: SetFundOpenCall;

  constructor(call: SetFundOpenCall) {
    this._call = call;
  }

  get _open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetFundOpenCall__Outputs {
  _call: SetFundOpenCall;

  constructor(call: SetFundOpenCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _new(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SweepCommitSoftCall extends ethereum.Call {
  get inputs(): SweepCommitSoftCall__Inputs {
    return new SweepCommitSoftCall__Inputs(this);
  }

  get outputs(): SweepCommitSoftCall__Outputs {
    return new SweepCommitSoftCall__Outputs(this);
  }
}

export class SweepCommitSoftCall__Inputs {
  _call: SweepCommitSoftCall;

  constructor(call: SweepCommitSoftCall) {
    this._call = call;
  }
}

export class SweepCommitSoftCall__Outputs {
  _call: SweepCommitSoftCall;

  constructor(call: SweepCommitSoftCall) {
    this._call = call;
  }
}

export class UpgradeCommitCall extends ethereum.Call {
  get inputs(): UpgradeCommitCall__Inputs {
    return new UpgradeCommitCall__Inputs(this);
  }

  get outputs(): UpgradeCommitCall__Outputs {
    return new UpgradeCommitCall__Outputs(this);
  }
}

export class UpgradeCommitCall__Inputs {
  _call: UpgradeCommitCall;

  constructor(call: UpgradeCommitCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpgradeCommitCall__Outputs {
  _call: UpgradeCommitCall;

  constructor(call: UpgradeCommitCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _withdrawFor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
